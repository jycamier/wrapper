package cmd

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/spf13/cobra"
)

// aliasCmd represents the alias command
var aliasCmd = &cobra.Command{
	Use:   "alias",
	Short: "Generate shell alias files",
	Long: `Generate shell alias files for all configured binaries.
Files are created in ~/.config/wrapper/ for bash, zsh, and fish.

To use them, add to your shell config:
  # For bash (~/.bashrc)
  source ~/.config/wrapper/aliases.bash

  # For zsh (~/.zshrc)
  source ~/.config/wrapper/aliases.zsh

  # For fish (~/.config/fish/config.fish)
  source ~/.config/wrapper/aliases.fish`,
	RunE: func(cmd *cobra.Command, args []string) error {
		homeDir, err := os.UserHomeDir()
		if err != nil {
			return fmt.Errorf("failed to get home directory: %w", err)
		}

		configDir := filepath.Join(homeDir, ".config", "wrapper")

		// Check if config directory exists
		if _, err := os.Stat(configDir); os.IsNotExist(err) {
			fmt.Println("No binaries configured yet")
			fmt.Println("Create a profile with: wrapper <binary> profile create <name>")
			return nil
		}

		// Read all directories (binaries) in config dir
		entries, err := os.ReadDir(configDir)
		if err != nil {
			return fmt.Errorf("failed to read config directory: %w", err)
		}

		var binaries []string
		for _, entry := range entries {
			if entry.IsDir() {
				binaries = append(binaries, entry.Name())
			}
		}

		if len(binaries) == 0 {
			fmt.Println("No binaries configured yet")
			fmt.Println("Create a profile with: wrapper <binary> profile create <name>")
			return nil
		}

		// Generate alias files
		if err := generateBashAliases(configDir, binaries); err != nil {
			return err
		}

		if err := generateZshAliases(configDir, binaries); err != nil {
			return err
		}

		if err := generateFishAliases(configDir, binaries); err != nil {
			return err
		}

		fmt.Println("âœ“ Alias files generated successfully!")
		fmt.Println()
		fmt.Println("To use them, add to your shell config:")
		fmt.Println()
		fmt.Println("  # Bash (~/.bashrc)")
		fmt.Printf("  source %s\n", filepath.Join(configDir, "aliases.bash"))
		fmt.Println()
		fmt.Println("  # Zsh (~/.zshrc)")
		fmt.Printf("  source %s\n", filepath.Join(configDir, "aliases.zsh"))
		fmt.Println()
		fmt.Println("  # Fish (~/.config/fish/config.fish)")
		fmt.Printf("  source %s\n", filepath.Join(configDir, "aliases.fish"))
		fmt.Println()
		fmt.Printf("Configured binaries: %v\n", binaries)

		return nil
	},
}

func generateBashAliases(configDir string, binaries []string) error {
	filePath := filepath.Join(configDir, "aliases.bash")
	file, err := os.Create(filePath)
	if err != nil {
		return fmt.Errorf("failed to create bash aliases file: %w", err)
	}
	defer file.Close()

	fmt.Fprintln(file, "# Wrapper aliases for Bash")
	fmt.Fprintln(file, "# Generated by wrapper - DO NOT EDIT MANUALLY")
	fmt.Fprintln(file, "# Regenerate with: wrapper alias")
	fmt.Fprintln(file)

	for _, binary := range binaries {
		fmt.Fprintf(file, "%s() { wrapper %s \"$@\"; }\n", binary, binary)
	}

	return nil
}

func generateZshAliases(configDir string, binaries []string) error {
	filePath := filepath.Join(configDir, "aliases.zsh")
	file, err := os.Create(filePath)
	if err != nil {
		return fmt.Errorf("failed to create zsh aliases file: %w", err)
	}
	defer file.Close()

	fmt.Fprintln(file, "# Wrapper aliases for Zsh")
	fmt.Fprintln(file, "# Generated by wrapper - DO NOT EDIT MANUALLY")
	fmt.Fprintln(file, "# Regenerate with: wrapper alias")
	fmt.Fprintln(file)

	for _, binary := range binaries {
		fmt.Fprintf(file, "%s() { wrapper %s \"$@\"; }\n", binary, binary)
	}

	return nil
}

func generateFishAliases(configDir string, binaries []string) error {
	filePath := filepath.Join(configDir, "aliases.fish")
	file, err := os.Create(filePath)
	if err != nil {
		return fmt.Errorf("failed to create fish aliases file: %w", err)
	}
	defer file.Close()

	fmt.Fprintln(file, "# Wrapper aliases for Fish")
	fmt.Fprintln(file, "# Generated by wrapper - DO NOT EDIT MANUALLY")
	fmt.Fprintln(file, "# Regenerate with: wrapper alias")
	fmt.Fprintln(file)

	for _, binary := range binaries {
		fmt.Fprintf(file, "function %s; wrapper %s $argv; end\n", binary, binary)
	}

	return nil
}

func init() {
	rootCmd.AddCommand(aliasCmd)
}
